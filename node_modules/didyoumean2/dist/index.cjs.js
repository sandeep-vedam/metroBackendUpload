"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("leven"),t=require("lodash.deburr");function r(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}const s=r(e),o=r(t);var n,T;(n=exports.ReturnTypeEnums||(exports.ReturnTypeEnums={})).ALL_CLOSEST_MATCHES="all-closest-matches",n.ALL_MATCHES="all-matches",n.ALL_SORTED_MATCHES="all-sorted-matches",n.FIRST_CLOSEST_MATCH="first-closest-match",n.FIRST_MATCH="first-match",(T=exports.ThresholdTypeEnums||(exports.ThresholdTypeEnums={})).EDIT_DISTANCE="edit-distance",T.SIMILARITY="similarity";const u=new Error("unknown returnType"),h=new Error("unknown thresholdType"),p=(e,t)=>{let r=e;return t.trimSpaces&&(r=r.trim().replace(/\s+/g," ")),t.deburr&&(r=o.default(r)),t.caseSensitive||(r=r.toLowerCase()),r},a=(e,t)=>{const{matchPath:r}=t,s=((e,t)=>{const r=t.length>0?t.reduce(((e,t)=>null==e?void 0:e[t]),e):e;return"string"!=typeof r?"":r})(e,r);return p(s,t)};exports.default=function(e,t,r){const o=(e=>{const t={caseSensitive:!1,deburr:!0,matchPath:[],returnType:exports.ReturnTypeEnums.FIRST_CLOSEST_MATCH,thresholdType:exports.ThresholdTypeEnums.SIMILARITY,trimSpaces:!0,...e};switch(t.thresholdType){case exports.ThresholdTypeEnums.EDIT_DISTANCE:return{threshold:20,...t};case exports.ThresholdTypeEnums.SIMILARITY:return{threshold:.4,...t};default:throw h}})(r),{returnType:n,threshold:T,thresholdType:c}=o,l=p(e,o);let E,S;switch(c){case exports.ThresholdTypeEnums.EDIT_DISTANCE:E=e=>e<=T,S=e=>s.default(l,a(e,o));break;case exports.ThresholdTypeEnums.SIMILARITY:E=e=>e>=T,S=e=>((e,t)=>{if(!e||!t)return 0;if(e===t)return 1;const r=s.default(e,t),o=Math.max(e.length,t.length);return(o-r)/o})(l,a(e,o));break;default:throw h}const d=[],m=t.length;switch(n){case exports.ReturnTypeEnums.ALL_CLOSEST_MATCHES:case exports.ReturnTypeEnums.FIRST_CLOSEST_MATCH:{const e=[];let r;switch(c){case exports.ThresholdTypeEnums.EDIT_DISTANCE:r=1/0;for(let s=0;s<m;s+=1){const o=S(t[s]);r>o&&(r=o),e.push(o)}break;case exports.ThresholdTypeEnums.SIMILARITY:r=0;for(let s=0;s<m;s+=1){const o=S(t[s]);r<o&&(r=o),e.push(o)}break;default:throw h}const s=e.length;for(let t=0;t<s;t+=1){const s=e[t];E(s)&&s===r&&d.push(t)}break}case exports.ReturnTypeEnums.ALL_MATCHES:for(let e=0;e<m;e+=1){E(S(t[e]))&&d.push(e)}break;case exports.ReturnTypeEnums.ALL_SORTED_MATCHES:{const e=[];for(let r=0;r<m;r+=1){const s=S(t[r]);E(s)&&e.push({score:s,index:r})}switch(c){case exports.ThresholdTypeEnums.EDIT_DISTANCE:e.sort(((e,t)=>e.score-t.score));break;case exports.ThresholdTypeEnums.SIMILARITY:e.sort(((e,t)=>t.score-e.score));break;default:throw h}for(const t of e)d.push(t.index);break}case exports.ReturnTypeEnums.FIRST_MATCH:for(let e=0;e<m;e+=1){if(E(S(t[e]))){d.push(e);break}}break;default:throw u}return((e,t,r)=>{switch(r){case exports.ReturnTypeEnums.ALL_CLOSEST_MATCHES:case exports.ReturnTypeEnums.ALL_MATCHES:case exports.ReturnTypeEnums.ALL_SORTED_MATCHES:return t.map((t=>e[t]));case exports.ReturnTypeEnums.FIRST_CLOSEST_MATCH:case exports.ReturnTypeEnums.FIRST_MATCH:return t.length?e[t[0]]:null;default:throw u}})(t,d,n)};
//# sourceMappingURL=index.cjs.js.map
